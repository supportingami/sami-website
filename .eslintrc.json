{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "prettier", "unicorn", "sort-class-members"],
  "extends": [
    "plugin:react/recommended", // Uses the recommended rules from @eslint-plugin-react
    "plugin:@typescript-eslint/recommended", // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "plugin:import/recommended",
    "plugin:import/typescript",
    "prettier" // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "sort-class-members/sort-class-members": [
      "error",
      {
        "order": [
          "[static-properties]",
          "[static-methods]",
          "[properties]",
          "[conventional-private-properties]",
          "constructor",
          "[methods]",
          "[conventional-private-methods]"
        ],
        "accessorPairPositioning": "getThenSet"
      }
    ],
    "import/no-duplicates": "error",
    "import/no-unresolved": "off",
    "import/no-named-as-default": "off",
    "max-classes-per-file": "error",
    "no-useless-escape": "off",
    "react/display-name": "warn",
    "react/jsx-no-target-blank": "warn",
    // https://github.com/standard/eslint-config-standard-with-typescript/issues/248
    "react/no-deprecated": "warn",
    "react/no-unescaped-entities": "off",
    "react/no-unknown-property": "warn",
    // as of v17 no longer required
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "prefer": "type-imports"
      }
    ],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/naming-convention.md
    // NOTE - typings throughout the platform are fairly inconsistent, hence the wide range of rules
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "default",
        "format": ["camelCase", "UPPER_CASE", "PascalCase", "snake_case"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "classMethod",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      // ignore cases where have to quote property names
      // https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.md#ignore-properties-that-require-quotes
      {
        "selector": [
          "classProperty",
          "objectLiteralProperty",
          "typeProperty",
          "classMethod",
          "objectLiteralMethod",
          "typeMethod",
          "accessor",
          "enumMember"
        ],
        "format": null,
        "modifiers": ["requiresQuotes"]
      },
      // allow __html prop
      // https://github.com/typescript-eslint/typescript-eslint/issues/1712
      {
        "selector": "property",
        "filter": "__html",
        "format": null
      }
    ],
    // Filenames - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/filename-case.md
    "unicorn/filename-case": [
      "warn",
      {
        "cases": {
          "camelCase": true,
          "pascalCase": true
        },
        "ignore": ["ci/", ""]
      }
    ],
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-namespace": "off",
    "no-restricted-imports": [
      "error",
      {
        "paths": []
      }
    ]
  }
}
