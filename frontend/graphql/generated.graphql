"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type AboutContent {
  Intro: String
  Testimonials(filters: TestimonialFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Testimonial]!
  Testimonials_connection(
    filters: TestimonialFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TestimonialRelationResponseCollection
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

input AboutContentInput {
  Intro: String
  Testimonials: [ID]
  publishedAt: DateTime
}

type AnnualReport {
  CoverImage: UploadFile!
  File: UploadFile!
  Year: Int!
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type AnnualReportEntityResponseCollection {
  nodes: [AnnualReport!]!
  pageInfo: Pagination!
}

input AnnualReportFiltersInput {
  Year: IntFilterInput
  and: [AnnualReportFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: AnnualReportFiltersInput
  or: [AnnualReportFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input AnnualReportInput {
  CoverImage: ID
  File: ID
  Year: Int
  publishedAt: DateTime
}

type BlogPost {
  ContentBlocks: [BlogPostContentBlocksDynamicZone]
  DateWritten: Date
  FeatureImage: UploadFile
  Slug: String
  Summary: String
  Title: String!
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

union BlogPostContentBlocksDynamicZone =
    ComponentCommonActionButton
  | ComponentCommonHtml
  | ComponentCommonImage
  | ComponentCommonTextBlock
  | Error

scalar BlogPostContentBlocksDynamicZoneInput

type BlogPostEntityResponseCollection {
  nodes: [BlogPost!]!
  pageInfo: Pagination!
}

input BlogPostFiltersInput {
  DateWritten: DateFilterInput
  Slug: StringFilterInput
  Summary: StringFilterInput
  Title: StringFilterInput
  and: [BlogPostFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: BlogPostFiltersInput
  or: [BlogPostFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogPostInput {
  ContentBlocks: [BlogPostContentBlocksDynamicZoneInput!]
  DateWritten: Date
  FeatureImage: ID
  Slug: String
  Summary: String
  Title: String
  publishedAt: DateTime
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentCommonActionButton {
  ClassNames: String
  Link: String!
  Text: String!
  id: ID!
}

input ComponentCommonActionButtonFiltersInput {
  ClassNames: StringFilterInput
  Link: StringFilterInput
  Text: StringFilterInput
  and: [ComponentCommonActionButtonFiltersInput]
  not: ComponentCommonActionButtonFiltersInput
  or: [ComponentCommonActionButtonFiltersInput]
}

input ComponentCommonActionButtonInput {
  ClassNames: String
  Link: String
  Text: String
  id: ID
}

type ComponentCommonHtml {
  HTML: String
  id: ID!
}

type ComponentCommonImage {
  AltText: String
  Caption: String
  ClassNames: String
  Media: UploadFile!
  id: ID!
}

type ComponentCommonTextBlock {
  Text: String!
  id: ID!
}

type ComponentHomeGetInvolved {
  ActionButtons(
    filters: ComponentCommonActionButtonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCommonActionButton]
  Description: String
  Image: UploadFile
  Text: String
  Title: String
  id: ID!
}

input ComponentHomeGetInvolvedInput {
  ActionButtons: [ComponentCommonActionButtonInput]
  Description: String
  Image: ID
  Text: String
  Title: String
  id: ID
}

type ComponentHomeHeroImage {
  ActionButtons(
    filters: ComponentCommonActionButtonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCommonActionButton]
  Image: UploadFile!
  Text: String!
  id: ID!
}

input ComponentHomeHeroImageFiltersInput {
  ActionButtons: ComponentCommonActionButtonFiltersInput
  Text: StringFilterInput
  and: [ComponentHomeHeroImageFiltersInput]
  not: ComponentHomeHeroImageFiltersInput
  or: [ComponentHomeHeroImageFiltersInput]
}

input ComponentHomeHeroImageInput {
  ActionButtons: [ComponentCommonActionButtonInput]
  Image: ID
  Text: String
  id: ID
}

type ComponentHomeImpactNumbers {
  Number: String
  Title: String
  id: ID!
}

input ComponentHomeImpactNumbersFiltersInput {
  Number: StringFilterInput
  Title: StringFilterInput
  and: [ComponentHomeImpactNumbersFiltersInput]
  not: ComponentHomeImpactNumbersFiltersInput
  or: [ComponentHomeImpactNumbersFiltersInput]
}

input ComponentHomeImpactNumbersInput {
  Number: String
  Title: String
  id: ID
}

type ComponentHomeImpactSection {
  ImpactNumbers(
    filters: ComponentHomeImpactNumbersFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentHomeImpactNumbers]
  Statement: String
  id: ID!
}

input ComponentHomeImpactSectionInput {
  ImpactNumbers: [ComponentHomeImpactNumbersInput]
  Statement: String
  id: ID
}

type ComponentHomeMissionStatement {
  ActionButtons(
    filters: ComponentCommonActionButtonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCommonActionButton]
  Description: String
  Heading: String
  Image: UploadFile
  Text: String
  id: ID!
}

input ComponentHomeMissionStatementInput {
  ActionButtons: [ComponentCommonActionButtonInput]
  Description: String
  Heading: String
  Image: ID
  Text: String
  id: ID
}

type ComponentHomeProjectSummary {
  ActionButtons(
    filters: ComponentCommonActionButtonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCommonActionButton]
  Image: UploadFile
  Text: String
  Title: String
  id: ID!
}

input ComponentHomeProjectSummaryInput {
  ActionButtons: [ComponentCommonActionButtonInput]
  Image: ID
  Text: String
  Title: String
  id: ID
}

type ComponentHomeProjectSummaryItem {
  Description: String
  Icon: UploadFile
  Title: String
  id: ID!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type DeleteMutationResponse {
  documentId: ID!
}

type DonateContent {
  DonateStatement: ComponentHomeMissionStatement
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

input DonateContentInput {
  DonateStatement: ComponentHomeMissionStatementInput
  publishedAt: DateTime
}

type Donor {
  Logo: UploadFile!
  Name: String!
  SortOrder: Float
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type DonorEntityResponseCollection {
  nodes: [Donor!]!
  pageInfo: Pagination!
}

input DonorFiltersInput {
  Name: StringFilterInput
  SortOrder: FloatFilterInput
  and: [DonorFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: DonorFiltersInput
  or: [DonorFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input DonorInput {
  Logo: ID
  Name: String
  SortOrder: Float
  publishedAt: DateTime
}

type DynamicContent {
  Content: [DynamicContentContentDynamicZone]
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

union DynamicContentContentDynamicZone =
    ComponentCommonActionButton
  | ComponentCommonHtml
  | ComponentCommonImage
  | ComponentCommonTextBlock
  | Error

scalar DynamicContentContentDynamicZoneInput

input DynamicContentInput {
  Content: [DynamicContentContentDynamicZoneInput!]
  publishedAt: DateTime
}

enum ENUM_PROJECTTYPE_STATUS {
  Completed
  Ongoing
}

type Error {
  code: String!
  message: String
}

type Faq {
  Question: String
  Response: String
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type FaqEntityResponseCollection {
  nodes: [Faq!]!
  pageInfo: Pagination!
}

input FaqFiltersInput {
  Question: StringFilterInput
  Response: StringFilterInput
  and: [FaqFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: FaqFiltersInput
  or: [FaqFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input FaqInput {
  Question: String
  Response: String
  publishedAt: DateTime
}

type FaqRelationResponseCollection {
  nodes: [Faq!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph =
    AboutContent
  | AnnualReport
  | BlogPost
  | ComponentCommonActionButton
  | ComponentCommonHtml
  | ComponentCommonImage
  | ComponentCommonTextBlock
  | ComponentHomeGetInvolved
  | ComponentHomeHeroImage
  | ComponentHomeImpactNumbers
  | ComponentHomeImpactSection
  | ComponentHomeMissionStatement
  | ComponentHomeProjectSummary
  | ComponentHomeProjectSummaryItem
  | DonateContent
  | Donor
  | DynamicContent
  | Faq
  | HomeContent
  | I18NLocale
  | Member
  | Partner
  | ProjectType
  | Resource
  | ReviewWorkflowsWorkflow
  | ReviewWorkflowsWorkflowStage
  | Testimonial
  | UploadFile
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | VolunteerContent

type HomeContent {
  GetInvolved: ComponentHomeGetInvolved
  HeroImages(
    filters: ComponentHomeHeroImageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentHomeHeroImage]
  ImpactSection: ComponentHomeImpactSection
  MissionStatement: ComponentHomeMissionStatement
  ProjectSummary: ComponentHomeProjectSummary
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

input HomeContentInput {
  GetInvolved: ComponentHomeGetInvolvedInput
  HeroImages: [ComponentHomeHeroImageInput]
  ImpactSection: ComponentHomeImpactSectionInput
  MissionStatement: ComponentHomeMissionStatementInput
  ProjectSummary: ComponentHomeProjectSummaryInput
  publishedAt: DateTime
}

type I18NLocale {
  code: String
  createdAt: DateTime
  documentId: ID!
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!
  pageInfo: Pagination!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Member {
  Bio: String
  BioImage: UploadFile
  Email: String
  LinkedIn: String
  Name: String
  Photo: UploadFile
  SortOrder: Float
  Tags: JSON
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type MemberEntityResponseCollection {
  nodes: [Member!]!
  pageInfo: Pagination!
}

input MemberFiltersInput {
  Bio: StringFilterInput
  Email: StringFilterInput
  LinkedIn: StringFilterInput
  Name: StringFilterInput
  SortOrder: FloatFilterInput
  Tags: JSONFilterInput
  and: [MemberFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: MemberFiltersInput
  or: [MemberFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input MemberInput {
  Bio: String
  BioImage: ID
  Email: String
  LinkedIn: String
  Name: String
  Photo: ID
  SortOrder: Float
  Tags: JSON
  publishedAt: DateTime
}

type Mutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  createAnnualReport(data: AnnualReportInput!, status: PublicationStatus = PUBLISHED): AnnualReport
  createBlogPost(data: BlogPostInput!, status: PublicationStatus = PUBLISHED): BlogPost
  createDonor(data: DonorInput!, status: PublicationStatus = PUBLISHED): Donor
  createFaq(data: FaqInput!, status: PublicationStatus = PUBLISHED): Faq
  createMember(data: MemberInput!, status: PublicationStatus = PUBLISHED): Member
  createPartner(data: PartnerInput!, status: PublicationStatus = PUBLISHED): Partner
  createProjectType(data: ProjectTypeInput!, status: PublicationStatus = PUBLISHED): ProjectType
  createResource(data: ResourceInput!, status: PublicationStatus = PUBLISHED): Resource
  createReviewWorkflowsWorkflow(
    data: ReviewWorkflowsWorkflowInput!
    status: PublicationStatus = PUBLISHED
  ): ReviewWorkflowsWorkflow
  createReviewWorkflowsWorkflowStage(
    data: ReviewWorkflowsWorkflowStageInput!
    status: PublicationStatus = PUBLISHED
  ): ReviewWorkflowsWorkflowStage
  createTestimonial(data: TestimonialInput!, status: PublicationStatus = PUBLISHED): Testimonial

  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteAboutContent: DeleteMutationResponse
  deleteAnnualReport(documentId: ID!): DeleteMutationResponse
  deleteBlogPost(documentId: ID!): DeleteMutationResponse
  deleteDonateContent: DeleteMutationResponse
  deleteDonor(documentId: ID!): DeleteMutationResponse
  deleteDynamicContent: DeleteMutationResponse
  deleteFaq(documentId: ID!): DeleteMutationResponse
  deleteHomeContent: DeleteMutationResponse
  deleteMember(documentId: ID!): DeleteMutationResponse
  deletePartner(documentId: ID!): DeleteMutationResponse
  deleteProjectType(documentId: ID!): DeleteMutationResponse
  deleteResource(documentId: ID!): DeleteMutationResponse
  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
  deleteTestimonial(documentId: ID!): DeleteMutationResponse
  deleteUploadFile(id: ID!): UploadFile

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVolunteerContent: DeleteMutationResponse

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAboutContent(data: AboutContentInput!, status: PublicationStatus = PUBLISHED): AboutContent
  updateAnnualReport(data: AnnualReportInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): AnnualReport
  updateBlogPost(data: BlogPostInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): BlogPost
  updateDonateContent(data: DonateContentInput!, status: PublicationStatus = PUBLISHED): DonateContent
  updateDonor(data: DonorInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Donor
  updateDynamicContent(data: DynamicContentInput!, status: PublicationStatus = PUBLISHED): DynamicContent
  updateFaq(data: FaqInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Faq
  updateHomeContent(data: HomeContentInput!, status: PublicationStatus = PUBLISHED): HomeContent
  updateMember(data: MemberInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Member
  updatePartner(data: PartnerInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Partner
  updateProjectType(data: ProjectTypeInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ProjectType
  updateResource(data: ResourceInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Resource
  updateReviewWorkflowsWorkflow(
    data: ReviewWorkflowsWorkflowInput!
    documentId: ID!
    status: PublicationStatus = PUBLISHED
  ): ReviewWorkflowsWorkflow
  updateReviewWorkflowsWorkflowStage(
    data: ReviewWorkflowsWorkflowStageInput!
    documentId: ID!
    status: PublicationStatus = PUBLISHED
  ): ReviewWorkflowsWorkflowStage
  updateTestimonial(data: TestimonialInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): Testimonial
  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!

  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateVolunteerContent(data: VolunteerContentInput!, status: PublicationStatus = PUBLISHED): VolunteerContent
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Partner {
  Logo: UploadFile!
  Name: String!
  SortOrder: Float
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type PartnerEntityResponseCollection {
  nodes: [Partner!]!
  pageInfo: Pagination!
}

input PartnerFiltersInput {
  Name: StringFilterInput
  SortOrder: FloatFilterInput
  and: [PartnerFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: PartnerFiltersInput
  or: [PartnerFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input PartnerInput {
  Logo: ID
  Name: String
  SortOrder: Float
  publishedAt: DateTime
}

type ProjectType {
  FeatureImage: UploadFile
  HomeSummary: String
  Icon: UploadFile
  Name: String
  PageContent: [ProjectTypePageContentDynamicZone]
  PageSummary: String
  Slug: String!
  Status: ENUM_PROJECTTYPE_STATUS
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type ProjectTypeEntityResponseCollection {
  nodes: [ProjectType!]!
  pageInfo: Pagination!
}

input ProjectTypeFiltersInput {
  HomeSummary: StringFilterInput
  Name: StringFilterInput
  PageSummary: StringFilterInput
  Slug: StringFilterInput
  Status: StringFilterInput
  and: [ProjectTypeFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: ProjectTypeFiltersInput
  or: [ProjectTypeFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectTypeInput {
  FeatureImage: ID
  HomeSummary: String
  Icon: ID
  Name: String
  PageContent: [ProjectTypePageContentDynamicZoneInput!]
  PageSummary: String
  Slug: String
  Status: ENUM_PROJECTTYPE_STATUS
  publishedAt: DateTime
}

union ProjectTypePageContentDynamicZone =
    ComponentCommonActionButton
  | ComponentCommonHtml
  | ComponentCommonImage
  | ComponentCommonTextBlock
  | Error

scalar ProjectTypePageContentDynamicZoneInput

enum PublicationStatus {
  DRAFT
  PUBLISHED
}

type Query {
  aboutContent(status: PublicationStatus = PUBLISHED): AboutContent
  annualReport(documentId: ID!, status: PublicationStatus = PUBLISHED): AnnualReport
  annualReports(
    filters: AnnualReportFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [AnnualReport]!
  annualReports_connection(
    filters: AnnualReportFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): AnnualReportEntityResponseCollection
  blogPost(documentId: ID!, status: PublicationStatus = PUBLISHED): BlogPost
  blogPosts(
    filters: BlogPostFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [BlogPost]!
  blogPosts_connection(
    filters: BlogPostFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): BlogPostEntityResponseCollection
  donateContent(status: PublicationStatus = PUBLISHED): DonateContent
  donor(documentId: ID!, status: PublicationStatus = PUBLISHED): Donor
  donors(
    filters: DonorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Donor]!
  donors_connection(
    filters: DonorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): DonorEntityResponseCollection
  dynamicContent(status: PublicationStatus = PUBLISHED): DynamicContent
  faq(documentId: ID!, status: PublicationStatus = PUBLISHED): Faq
  faqs(
    filters: FaqFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Faq]!
  faqs_connection(
    filters: FaqFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): FaqEntityResponseCollection
  homeContent(status: PublicationStatus = PUBLISHED): HomeContent
  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [I18NLocale]!
  i18NLocales_connection(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  member(documentId: ID!, status: PublicationStatus = PUBLISHED): Member
  members(
    filters: MemberFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Member]!
  members_connection(
    filters: MemberFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): MemberEntityResponseCollection
  partner(documentId: ID!, status: PublicationStatus = PUBLISHED): Partner
  partners(
    filters: PartnerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Partner]!
  partners_connection(
    filters: PartnerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): PartnerEntityResponseCollection
  projectType(documentId: ID!, status: PublicationStatus = PUBLISHED): ProjectType
  projectTypes(
    filters: ProjectTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [ProjectType]!
  projectTypes_connection(
    filters: ProjectTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): ProjectTypeEntityResponseCollection
  resource(documentId: ID!, status: PublicationStatus = PUBLISHED): Resource
  resources(
    filters: ResourceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Resource]!
  resources_connection(
    filters: ResourceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): ResourceEntityResponseCollection
  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  reviewWorkflowsWorkflowStages(
    filters: ReviewWorkflowsWorkflowStageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [ReviewWorkflowsWorkflowStage]!
  reviewWorkflowsWorkflowStages_connection(
    filters: ReviewWorkflowsWorkflowStageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): ReviewWorkflowsWorkflowStageEntityResponseCollection
  reviewWorkflowsWorkflows(
    filters: ReviewWorkflowsWorkflowFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [ReviewWorkflowsWorkflow]!
  reviewWorkflowsWorkflows_connection(
    filters: ReviewWorkflowsWorkflowFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): ReviewWorkflowsWorkflowEntityResponseCollection
  testimonial(documentId: ID!, status: PublicationStatus = PUBLISHED): Testimonial
  testimonials(
    filters: TestimonialFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [Testimonial]!
  testimonials_connection(
    filters: TestimonialFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): TestimonialEntityResponseCollection
  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [UploadFile]!
  uploadFiles_connection(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): UploadFileEntityResponseCollection
  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [UsersPermissionsRole]!
  usersPermissionsRoles_connection(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): [UsersPermissionsUser]!
  usersPermissionsUsers_connection(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    status: PublicationStatus = PUBLISHED
  ): UsersPermissionsUserEntityResponseCollection
  volunteerContent(status: PublicationStatus = PUBLISHED): VolunteerContent
}

type Resource {
  Description: String
  Image: UploadFile
  Links(
    filters: ComponentCommonActionButtonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCommonActionButton]
  Media: UploadFile
  Title: String
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type ResourceEntityResponseCollection {
  nodes: [Resource!]!
  pageInfo: Pagination!
}

input ResourceFiltersInput {
  Description: StringFilterInput
  Links: ComponentCommonActionButtonFiltersInput
  Title: StringFilterInput
  and: [ResourceFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: ResourceFiltersInput
  or: [ResourceFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ResourceInput {
  Description: String
  Image: ID
  Links: [ComponentCommonActionButtonInput]
  Media: ID
  Title: String
  publishedAt: DateTime
}

type ReviewWorkflowsWorkflow {
  contentTypes: JSON!
  createdAt: DateTime
  documentId: ID!
  name: String!
  publishedAt: DateTime
  stageRequiredToPublish: ReviewWorkflowsWorkflowStage
  stages(
    filters: ReviewWorkflowsWorkflowStageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ReviewWorkflowsWorkflowStage]!
  stages_connection(
    filters: ReviewWorkflowsWorkflowStageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ReviewWorkflowsWorkflowStageRelationResponseCollection
  updatedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
  and: [ReviewWorkflowsWorkflowFiltersInput]
  contentTypes: JSONFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: ReviewWorkflowsWorkflowFiltersInput
  or: [ReviewWorkflowsWorkflowFiltersInput]
  publishedAt: DateTimeFilterInput
  stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
  stages: ReviewWorkflowsWorkflowStageFiltersInput
  updatedAt: DateTimeFilterInput
}

input ReviewWorkflowsWorkflowInput {
  contentTypes: JSON
  name: String
  publishedAt: DateTime
  stageRequiredToPublish: ID
  stages: [ID]
}

type ReviewWorkflowsWorkflowStage {
  color: String
  createdAt: DateTime
  documentId: ID!
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
  workflow: ReviewWorkflowsWorkflow
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
  and: [ReviewWorkflowsWorkflowStageFiltersInput]
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: ReviewWorkflowsWorkflowStageFiltersInput
  or: [ReviewWorkflowsWorkflowStageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  workflow: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
  color: String
  name: String
  publishedAt: DateTime
  workflow: ID
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Testimonial {
  Bio: String!
  Content: String!
  Name: String!
  Photo: UploadFile!
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  updatedAt: DateTime
}

type TestimonialEntityResponseCollection {
  nodes: [Testimonial!]!
  pageInfo: Pagination!
}

input TestimonialFiltersInput {
  Bio: StringFilterInput
  Content: StringFilterInput
  Name: StringFilterInput
  and: [TestimonialFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: TestimonialFiltersInput
  or: [TestimonialFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input TestimonialInput {
  Bio: String
  Content: String
  Name: String
  Photo: ID
  publishedAt: DateTime
}

type TestimonialRelationResponseCollection {
  nodes: [Testimonial!]!
}

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  documentId: ID!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  publishedAt: DateTime
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!
  pageInfo: Pagination!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  ext: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  publishedAt: DateTimeFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  documentId: ID!
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  documentId: ID!
  publishedAt: DateTime
  role: UsersPermissionsRole
  updatedAt: DateTime
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  publishedAt: DateTimeFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  documentId: ID!
  name: String!
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [UsersPermissionsPermission]!
  permissions_connection(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  publishedAt: DateTime
  type: String
  updatedAt: DateTime
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [UsersPermissionsUser]!
  users_connection(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!
  pageInfo: Pagination!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentId: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  publishedAt: DateTimeFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  publishedAt: DateTime
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  documentId: ID!
  email: String!
  provider: String
  publishedAt: DateTime
  role: UsersPermissionsRole
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!
  pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  documentId: IDFilterInput
  email: StringFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  provider: StringFilterInput
  publishedAt: DateTimeFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmed: Boolean
  email: String
  password: String
  provider: String
  publishedAt: DateTime
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}

type VolunteerContent {
  Content: [VolunteerContentContentDynamicZone]
  createdAt: DateTime
  documentId: ID!
  faqs(filters: FaqFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Faq]!
  faqs_connection(
    filters: FaqFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): FaqRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

union VolunteerContentContentDynamicZone =
    ComponentCommonActionButton
  | ComponentCommonHtml
  | ComponentCommonImage
  | ComponentCommonTextBlock
  | Error

scalar VolunteerContentContentDynamicZoneInput

input VolunteerContentInput {
  Content: [VolunteerContentContentDynamicZoneInput!]
  faqs: [ID]
  publishedAt: DateTime
}
