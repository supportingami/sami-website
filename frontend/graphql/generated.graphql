type About {
  Content: String
  Title: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type AboutEntity {
  attributes: About
  id: ID
}

type AboutEntityResponse {
  data: AboutEntity
}

type AboutEntityResponseCollection {
  data: [AboutEntity!]!
  meta: ResponseCollectionMeta!
}

input AboutFiltersInput {
  Content: StringFilterInput
  Title: StringFilterInput
  and: [AboutFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: AboutFiltersInput
  or: [AboutFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input AboutInput {
  Content: String
  Title: String
  publishedAt: DateTime
}

type AnnualReport {
  File: UploadFileEntityResponse
  Year: Int
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type AnnualReportEntity {
  attributes: AnnualReport
  id: ID
}

type AnnualReportEntityResponse {
  data: AnnualReportEntity
}

type AnnualReportEntityResponseCollection {
  data: [AnnualReportEntity!]!
  meta: ResponseCollectionMeta!
}

input AnnualReportFiltersInput {
  Year: IntFilterInput
  and: [AnnualReportFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: AnnualReportFiltersInput
  or: [AnnualReportFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input AnnualReportInput {
  File: ID
  Year: Int
  publishedAt: DateTime
}

type BlogPost {
  Content: String
  DateWritten: Date
  FeatureImage: UploadFileEntityResponse
  Summary: String
  Tags(
    filters: BlogTagFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): BlogTagRelationResponseCollection
  Title: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type BlogPostEntity {
  attributes: BlogPost
  id: ID
}

type BlogPostEntityResponse {
  data: BlogPostEntity
}

type BlogPostEntityResponseCollection {
  data: [BlogPostEntity!]!
  meta: ResponseCollectionMeta!
}

input BlogPostFiltersInput {
  Content: StringFilterInput
  DateWritten: DateFilterInput
  Summary: StringFilterInput
  Tags: BlogTagFiltersInput
  Title: StringFilterInput
  and: [BlogPostFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: BlogPostFiltersInput
  or: [BlogPostFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogPostInput {
  Content: String
  DateWritten: Date
  FeatureImage: ID
  Summary: String
  Tags: [ID]
  Title: String
  publishedAt: DateTime
}

type BlogTag {
  BlogPost: BlogPostEntityResponse
  Tag: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type BlogTagEntity {
  attributes: BlogTag
  id: ID
}

type BlogTagEntityResponse {
  data: BlogTagEntity
}

type BlogTagEntityResponseCollection {
  data: [BlogTagEntity!]!
  meta: ResponseCollectionMeta!
}

input BlogTagFiltersInput {
  BlogPost: BlogPostFiltersInput
  Tag: StringFilterInput
  and: [BlogTagFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: BlogTagFiltersInput
  or: [BlogTagFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogTagInput {
  BlogPost: ID
  Tag: String
  publishedAt: DateTime
}

type BlogTagRelationResponseCollection {
  data: [BlogTagEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Country {
  Content: String
  Name: String
  Project: ProjectEntityResponse
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type CountryEntity {
  attributes: Country
  id: ID
}

type CountryEntityResponse {
  data: CountryEntity
}

type CountryEntityResponseCollection {
  data: [CountryEntity!]!
  meta: ResponseCollectionMeta!
}

input CountryFiltersInput {
  Content: StringFilterInput
  Name: StringFilterInput
  Project: ProjectFiltersInput
  and: [CountryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CountryFiltersInput
  or: [CountryFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input CountryInput {
  Content: String
  Name: String
  Project: ID
  publishedAt: DateTime
}

type CountryRelationResponseCollection {
  data: [CountryEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_MEMBER_ORGANISATION {
  AMI
  SAMI
}

type Faq {
  Question: String
  Response: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type FaqEntity {
  attributes: Faq
  id: ID
}

type FaqEntityResponse {
  data: FaqEntity
}

type FaqEntityResponseCollection {
  data: [FaqEntity!]!
  meta: ResponseCollectionMeta!
}

input FaqFiltersInput {
  Question: StringFilterInput
  Response: StringFilterInput
  and: [FaqFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: FaqFiltersInput
  or: [FaqFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input FaqInput {
  Question: String
  Response: String
  publishedAt: DateTime
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph =
    About
  | AnnualReport
  | BlogPost
  | BlogTag
  | Country
  | Faq
  | I18NLocale
  | Member
  | Project
  | ProjectType
  | Resource
  | UploadFile
  | UploadFolder
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Volunteer

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Member {
  Bio: String
  BioImage: UploadFileEntityResponse
  Email: String
  LinkedIn: String
  Name: String
  Order: Int
  Organisation: ENUM_MEMBER_ORGANISATION
  Photo: UploadFileEntityResponse
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type MemberEntity {
  attributes: Member
  id: ID
}

type MemberEntityResponse {
  data: MemberEntity
}

type MemberEntityResponseCollection {
  data: [MemberEntity!]!
  meta: ResponseCollectionMeta!
}

input MemberFiltersInput {
  Bio: StringFilterInput
  Email: StringFilterInput
  LinkedIn: StringFilterInput
  Name: StringFilterInput
  Order: IntFilterInput
  Organisation: StringFilterInput
  and: [MemberFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: MemberFiltersInput
  or: [MemberFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input MemberInput {
  Bio: String
  BioImage: ID
  Email: String
  LinkedIn: String
  Name: String
  Order: Int
  Organisation: ENUM_MEMBER_ORGANISATION
  Photo: ID
  publishedAt: DateTime
}

type Mutation {
  createAbout(data: AboutInput!): AboutEntityResponse
  createAnnualReport(data: AnnualReportInput!): AnnualReportEntityResponse
  createBlogPost(data: BlogPostInput!): BlogPostEntityResponse
  createBlogTag(data: BlogTagInput!): BlogTagEntityResponse
  createCountry(data: CountryInput!): CountryEntityResponse
  createFaq(data: FaqInput!): FaqEntityResponse
  createMember(data: MemberInput!): MemberEntityResponse
  createProject(data: ProjectInput!): ProjectEntityResponse
  createProjectType(data: ProjectTypeInput!): ProjectTypeEntityResponse
  createResource(data: ResourceInput!): ResourceEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createVolunteer(data: VolunteerInput!): VolunteerEntityResponse
  deleteAbout(id: ID!): AboutEntityResponse
  deleteAnnualReport(id: ID!): AnnualReportEntityResponse
  deleteBlogPost(id: ID!): BlogPostEntityResponse
  deleteBlogTag(id: ID!): BlogTagEntityResponse
  deleteCountry(id: ID!): CountryEntityResponse
  deleteFaq(id: ID!): FaqEntityResponse
  deleteMember(id: ID!): MemberEntityResponse
  deleteProject(id: ID!): ProjectEntityResponse
  deleteProjectType(id: ID!): ProjectTypeEntityResponse
  deleteResource(id: ID!): ResourceEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVolunteer(id: ID!): VolunteerEntityResponse

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAbout(data: AboutInput!, id: ID!): AboutEntityResponse
  updateAnnualReport(data: AnnualReportInput!, id: ID!): AnnualReportEntityResponse
  updateBlogPost(data: BlogPostInput!, id: ID!): BlogPostEntityResponse
  updateBlogTag(data: BlogTagInput!, id: ID!): BlogTagEntityResponse
  updateCountry(data: CountryInput!, id: ID!): CountryEntityResponse
  updateFaq(data: FaqInput!, id: ID!): FaqEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateMember(data: MemberInput!, id: ID!): MemberEntityResponse
  updateProject(data: ProjectInput!, id: ID!): ProjectEntityResponse
  updateProjectType(data: ProjectTypeInput!, id: ID!): ProjectTypeEntityResponse
  updateResource(data: ResourceInput!, id: ID!): ResourceEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateVolunteer(data: VolunteerInput!, id: ID!): VolunteerEntityResponse
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Project {
  Country(
    filters: CountryFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): CountryRelationResponseCollection
  ProjectTypes(
    filters: ProjectTypeFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ProjectTypeRelationResponseCollection
  Summary: String
  Title: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type ProjectEntity {
  attributes: Project
  id: ID
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectFiltersInput {
  Country: CountryFiltersInput
  ProjectTypes: ProjectTypeFiltersInput
  Summary: StringFilterInput
  Title: StringFilterInput
  and: [ProjectFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ProjectFiltersInput
  or: [ProjectFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectInput {
  Country: [ID]
  ProjectTypes: [ID]
  Summary: String
  Title: String
  publishedAt: DateTime
}

type ProjectType {
  Content: String
  Name: String
  Project: ProjectEntityResponse
  Summary: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type ProjectTypeEntity {
  attributes: ProjectType
  id: ID
}

type ProjectTypeEntityResponse {
  data: ProjectTypeEntity
}

type ProjectTypeEntityResponseCollection {
  data: [ProjectTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectTypeFiltersInput {
  Content: StringFilterInput
  Name: StringFilterInput
  Project: ProjectFiltersInput
  Summary: StringFilterInput
  and: [ProjectTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ProjectTypeFiltersInput
  or: [ProjectTypeFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectTypeInput {
  Content: String
  Name: String
  Project: ID
  Summary: String
  publishedAt: DateTime
}

type ProjectTypeRelationResponseCollection {
  data: [ProjectTypeEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  about(id: ID): AboutEntityResponse
  abouts(
    filters: AboutFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): AboutEntityResponseCollection
  annualReport(id: ID): AnnualReportEntityResponse
  annualReports(
    filters: AnnualReportFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): AnnualReportEntityResponseCollection
  blogPost(id: ID): BlogPostEntityResponse
  blogPosts(
    filters: BlogPostFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): BlogPostEntityResponseCollection
  blogTag(id: ID): BlogTagEntityResponse
  blogTags(
    filters: BlogTagFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): BlogTagEntityResponseCollection
  countries(
    filters: CountryFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): CountryEntityResponseCollection
  country(id: ID): CountryEntityResponse
  faq(id: ID): FaqEntityResponse
  faqs(
    filters: FaqFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): FaqEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  member(id: ID): MemberEntityResponse
  members(
    filters: MemberFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): MemberEntityResponseCollection
  project(id: ID): ProjectEntityResponse
  projectType(id: ID): ProjectTypeEntityResponse
  projectTypes(
    filters: ProjectTypeFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ProjectTypeEntityResponseCollection
  projects(
    filters: ProjectFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ProjectEntityResponseCollection
  resource(id: ID): ResourceEntityResponse
  resources(
    filters: ResourceFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): ResourceEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  volunteer(id: ID): VolunteerEntityResponse
  volunteers(
    filters: VolunteerFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): VolunteerEntityResponseCollection
}

type Resource {
  Description: String
  Image: UploadFileEntityResponse
  Media: UploadFileEntityResponse
  Title: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type ResourceEntity {
  attributes: Resource
  id: ID
}

type ResourceEntityResponse {
  data: ResourceEntity
}

type ResourceEntityResponseCollection {
  data: [ResourceEntity!]!
  meta: ResponseCollectionMeta!
}

input ResourceFiltersInput {
  Description: StringFilterInput
  Title: StringFilterInput
  and: [ResourceFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ResourceFiltersInput
  or: [ResourceFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ResourceInput {
  Description: String
  Image: ID
  Media: ID
  Title: String
  publishedAt: DateTime
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type Volunteer {
  ApplicationLink: String
  Content: String
  Title: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type VolunteerEntity {
  attributes: Volunteer
  id: ID
}

type VolunteerEntityResponse {
  data: VolunteerEntity
}

type VolunteerEntityResponseCollection {
  data: [VolunteerEntity!]!
  meta: ResponseCollectionMeta!
}

input VolunteerFiltersInput {
  ApplicationLink: StringFilterInput
  Content: StringFilterInput
  Title: StringFilterInput
  and: [VolunteerFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: VolunteerFiltersInput
  or: [VolunteerFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input VolunteerInput {
  ApplicationLink: String
  Content: String
  Title: String
  publishedAt: DateTime
}
